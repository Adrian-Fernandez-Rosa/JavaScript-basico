 MODULOS JS
 
    MÓDULOS ES6

   > JS siempre ha tenido el problema de la organización del código, sobre todo en aplicaciones grandes.
   > Siempre se nos llenaban los archivos js de funciones y clases para organizar mejor el código de nuestras aplicaciones.
   
   > Pero tener todo en un fichero es poco eficiente, la mayoría de los lenguajes de programación se organizan en módulos,
     o sistemas modulares para organizar la información.
   > Vimos en el curso CSS como SaSS nos ayudaba a organizar modularmente los archivos .scss que posteriormente se compilaban
     en un solo .css.
   > En el lado del cliente esto se "solucionaba" con llamadas a sucesivos archivos .js pero con el problema de ser poco 
     eficiente, sobrecargar al servidor y tener cuidado con el orden de carga.
   > En ECMAScript ES6 aparecen los módulos ES o ESM, que permiten exportar e importar datos entre distintos ficheros de JS,
     con las palabras claves.
	
	//ANALIZAR ARCHIVO LINEA 57

     > export
       Exporta datos (variables, funciones, clases...)
       del fichero actual hacia otros que lo importen.

     > import
      Importa datos (variables, funciones, clases...) dede un .js al que lo solicita.

      EJEMPLO:
      > Creamos un fichero exporta.js.
      > ojo ponemos type: module en el package.json.


*/

// Ejemplo 1
   // import { numero } from "./exporta.js";
  /*   
  import { numero, miFuncion } from "./exporta.js"; //entre llaves elementos y propiedades para importar
    console.log(numero);
    console.log(miFuncion());
 */

//EJEMPLO IMPORTACION POR DEFECTO.
    import miImportacione from "./exporta.js"; //notar que en el archivo exporta no esta la referencia miImportacione 
    //se le puede poner cualquier nombre debido a
    //const porDefecto = () => "Soy la función por defecto."
    //export { porDefecto as default}; 
    console.log(miImportacione())

    // IMPORTACION TOTAL DE LO QUE EL OTRO ARCHIVO EXPORTA
    import * as miImportacion from './exporta.js';
    console.log(miImportacion.saludar());
    console.log(miImportacion.despedir());
    // y a la por defecto
    console.log(miImportacion.default());
 
 --------------------------------------------------------- 
 
 ARCHIVO EXPORTA.JS
export const numero = 1256;
 export const miFuncion = () => 'hola';


 
 let nombre = 'Adrian';
 const saludar = () => "¡Hola!";
 const goodbye = () => "¡Adios!";
 const porDefecto = () => "Soy la función por defecto."

export { nombre };  //Se crea un módulo y se añade number.
export { saludar, goodbye as despedir}; // Se añade saludar y despedir al módulo.
export { porDefecto as default};  //se añade Clase al módulo (default) //corregir este comentario luego

----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
 
 
 
* Trabajando con módulos
  * ¿Qué es un módulo?
  * Haciendo uso de require para importar
  * Usando import y export como solución actual
  * Diferencia de importación entre export y export default

* Trabajando con librerías
  * ¿Qué es una librería?

    En informática, una biblioteca , es un conjunto de implementaciones funcionales, codificadas en un lenguaje de programación, 
    que ofrece una interfaz bien definida para la funcionalidad que se invoca.

    Las librerías son fundamentales nos permiten aprovechar el código de otros desarrolladores
    En nodeJS a las librerías se les llama "paquetes"
    El gestor de paquetes es npm

  * Instalando librerías externas a través de npm
  * Haciendo uso de librerías presentes entre node_modules

Las librerías o paquetes las instalamos con

npm install <nombre del paquete> (local para un proyecto)
npm install -g <nombre del paquete> (global, accesible por todos los proyectos)
npm install express

El archivo package.json se actualiza con las dependencias
Creamos el paquete con npm init

Cuando queremos instalar una dependencia necesaria en ejecucion
npm install --save express

Si fuese una dependencia de desarrollo sería
npm install --save-dev <nombre del paquete>

https://www.npmjs.com/package/express

Vamos a ver y a instalar express, que es la librería que nos permite hacer aplicaciones webs
Creamos app.js
>> seguimos en app.js

//ojo para matar un puerto npx kill-port 3000

  * Librerías externas de interés
  https://profile.es/blog/librerias-javascript/
 
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------